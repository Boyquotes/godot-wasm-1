env_scripts = [
'''
#!@duckscript
wasm_snip = which wasm-snip
set_env WASM_SNIP ${wasm_snip}

wasm_opt = which wasm-opt
set_env WASM_OPT ${wasm_opt}
'''
]

[env]
CARGO_MAKE_EXTEND_WORKSPACE_MAKEFILE = true
GODOT_DIR = "out/addons/godot_wasm/bin"
EXAMPLE_DIR = "example"
WASM_DIR = "example/wasm"
WASM_CONFIG = "example/wasm/.cargo/config.toml"

[env.development]
BUILD_PROFILE = "dev"
TARGET_PROFILE = "debug"

[env.production]
BUILD_PROFILE = "release"
TARGET_PROFILE = "release"

[tasks.build]
command = "cargo"
args = [
  "build",
  "--profile",
  "${BUILD_PROFILE}",
  "--target",
  "${CARGO_MAKE_CRATE_TARGET_TRIPLE}",
  "@@split(BUILD_EXTRA_ARGS,;)",
]

[tasks.deploy-workspace]
dependencies = ["build"]
script_runner = "@duckscript"
script = '''
dst_root_dir = join_path ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY} ${GODOT_DIR}
dst_root_dir = canonicalize ${dst_root_dir}
if not is_path_exists ${dst_root_dir}
  echo No path exist: ${dst_root_dir}
  exit 1
end

src_dir = join_path ${CARGO_MAKE_CRATE_TARGET_DIRECTORY} ${CARGO_MAKE_CRATE_TARGET_TRIPLE} ${TARGET_PROFILE}
dst_dir = join_path ${dst_root_dir} ${CARGO_MAKE_CRATE_TARGET_TRIPLE}

echo Destination:
echo ${dst_dir}
if not not is_path_exists ${dst_dir}
  mkdir ${dst_dir}
end

if equals ${CARGO_MAKE_RUST_TARGET_OS} windows
  src = concat ${CARGO_MAKE_CRATE_FS_NAME} .dll
elseif equals ${CARGO_MAKE_RUST_TARGET_OS} macos
  src = concat ${CARGO_MAKE_CRATE_FS_NAME} .dylib
elseif equals ${CARGO_MAKE_RUST_TARGET_OS} linux
  src = concat lib ${CARGO_MAKE_CRATE_FS_NAME} .so
else
  echo Unknown os ${CARGO_MAKE_RUST_TARGET_OS}
  exit 1
end

dst = join_path ${dst_dir} ${src}
src = join_path ${src_dir} ${src}
ls -l ${src}
cp ${src} ${dst}
'''

# Add more targets if needed
[tasks.deploy-workspace-cross.env.CUSTOM_CROSS_TARGETS]
condition = { env_not_set = ["CUSTOM_CROSS_TARGETS"] }
value = "i686-pc-windows-gnu;x86_64-pc-windows-gnu"

[tasks.deploy-workspace-cross.env.CUSTOM_CROSS_TARGETS_OUT]
condition = { env_not_set = ["CUSTOM_CROSS_TARGETS_OUT"] }
value = "i686-pc-windows-msvc;x86_64-pc-windows-msvc"

[tasks.deploy-workspace-cross.install_crate]
crate_name = "cross"
binary = "cross"

[tasks.deploy-workspace-cross]
dependencies = ["deploy-workspace"]
script_runner = "@duckscript"
script = '''
dst_root_dir = join_path ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY} ${GODOT_DIR}
dst_root_dir = canonicalize ${dst_root_dir}
if not is_path_exists ${dst_root_dir}
  echo No path exist: ${dst_root_dir}
  exit 1
end

targets = split ${CUSTOM_CROSS_TARGETS} ;
targets_out = split ${CUSTOM_CROSS_TARGETS_OUT} ;

i = array_length ${targets}
while greater_than ${i} 0

i = calc ${i} - 1
target = array_get ${targets} ${i}
target_out = array_get ${targets_out} ${i}

exec --fail-on-error cross build --profile ${BUILD_PROFILE} --target ${target}

src_dir = join_path ${CARGO_MAKE_CRATE_TARGET_DIRECTORY} ${target} ${TARGET_PROFILE}
dst_dir = join_path ${dst_root_dir} ${target_out}

echo Destination:
echo ${dst_dir}
if not not is_path_exists ${dst_dir}
  mkdir ${dst_dir}
end

src = concat ${CARGO_MAKE_CRATE_FS_NAME} .dll

dst = join_path ${dst_dir} ${src}
src = join_path ${src_dir} ${src}
ls -l ${src}
cp ${src} ${dst}

end

release ${targets}
release ${targets_out}
'''

[tasks.deploy-workspace-wsl]
dependencies = ["deploy-workspace"]
command = "wsl"
args = [
  "-e",
  "bash",
  "-i",
  "-c",
  "$0 $@",
  "cargo",
  "make",
  "--disable-check-for-updates",
  "--no-on-error",
  "--loglevel=info",
  "--profile=${CARGO_MAKE_PROFILE}",
  "--allow-private",
  "--no-workspace",
  "deploy-workspace",
]

[tasks.build-wasm]
run_task = "build"

[tasks.build-wasm.env]
BUILD_EXTRA_ARGS = ["--config", "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/${WASM_CONFIG}"]
CARGO_MAKE_CRATE_TARGET_TRIPLE = "wasm32-unknown-unknown"

[tasks.deploy-wasm]
dependencies = ["build-wasm"]
script_runner = "@duckscript"
script = '''
wasm_dir = join_path ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY} ${WASM_DIR}
wasm_dir = canonicalize ${wasm_dir}

src_file = join_path ${CARGO_MAKE_CRATE_TARGET_DIRECTORY} wasm32-unknown-unknown ${TARGET_PROFILE}

f = concat ${CARGO_MAKE_CRATE_FS_NAME} ".wasm"

src_file = join_path ${src_file} ${f}
dst_file = join_path ${wasm_dir} ${f}

echo Copy ${src_file} to ${dst_file}
cp ${src_file} ${dst_file}

if set ${WASM_SNIP}
  echo "Running wasm-snip"
  exec --fail-on-error ${WASM_SNIP} --snip-rust-panicking-code ${dst_file} -o ${dst_file}
end

if set ${WASM_OPT}
  echo "Running wasm-opt"
  exec --fail-on-error ${WASM_OPT} -Oz ${dst_file} -o ${dst_file}
end
'''

[tasks.copy-addons]
script_runner = "@duckscript"
script = '''
out_dir = join_path ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY} out/addons
out_dir = canonicalize ${out_dir}

exp_dir = join_path ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY} ${EXAMPLE_DIR}
exp_dir = canonicalize ${exp_dir}

echo Source addon directory: ${out_dir}
out_dir = join_path ${out_dir} **/*

dst_dir = join_path ${exp_dir} addons
echo Destination addon directory: ${dst_dir}
glob_cp ${out_dir} ${dst_dir}
'''

[tasks.deploy]
workspace = false

[[tasks.deploy.run_task]]
name = "deploy-workspace-wsl"
condition = { platforms = ["windows"], env_true = ["USE_WSL"] }

[[tasks.deploy.run_task]]
name = "deploy-workspace-cross"
condition = { platforms = ["linux"], env_true = ["USE_CROSS"] }

[[tasks.deploy.run_task]]
name = "deploy-workspace"

[tasks.deploy-example]
workspace = false
dependencies = ["deploy", "copy-addons"]
env = { CARGO_MAKE_WORKSPACE_INCLUDE_MEMBERS = "example/wasm/*" }
run_task = { name = "deploy-wasm", fork = true }
