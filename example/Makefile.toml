extend = "../Makefile.toml"

[env]
EXAMPLE_DIR = "example"
WASM_PROJECTS = "double-pendulum,host-bindings,connect-4"

[tasks.build_wasm]
script_runner = "@duckscript"
script = '''
is_release = eq ${CARGO_MAKE_PROFILE} "production"

wasm_dir = join_path ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY} ${EXAMPLE_DIR} wasm
wasm_dir = canonicalize ${wasm_dir}
wasm_config = join_path ${wasm_dir} .cargo/config.toml

l = split ${WASM_PROJECTS} ,

for i in ${l}
  echo Building: ${i}

  if ${is_release}
    exec --fail-on-error cargo build --release --config ${wasm_config} -p ${i}
  else
    exec --fail-on-error cargo build --config ${wasm_config} -p ${i}
  end
end

release ${l}
'''

[tasks.deploy_wasm]
dependencies = ["build_wasm"]
script_runner = "@duckscript"
script = '''
is_release = eq ${CARGO_MAKE_PROFILE} "production"

wasm_dir = join_path ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY} ${EXAMPLE_DIR} wasm
wasm_dir = canonicalize ${wasm_dir}

has_wasm_snip = which wasm-snip
has_wasm_snip = eq ${has_wasm_snip} ""
has_wasm_snip = not ${has_wasm_snip}
has_wasm_opt = which wasm-opt
has_wasm_opt = eq ${has_wasm_opt} ""
has_wasm_opt = not ${has_wasm_opt}

if ${has_wasm_snip}
  echo "Has wasm-snip"
else
  echo "No wasm-snip"
end
if ${has_wasm_opt}
  echo "Has wasm-opt"
else
  echo "No wasm-opt"
end

l = split ${WASM_PROJECTS} ,

for i in ${l}
  src_file = join_path ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY} target/wasm32-unknown-unknown

  if ${is_release}
    src_file = join_path ${src_file} release
  else
    src_file = join_path ${src_file} debug
  end

  f = replace ${i} - _
  f = concat ${f} ".wasm"
  src_file = join_path ${src_file} ${f}
  dst_file = join_path ${wasm_dir} ${f}

  echo Copy ${src_file} to ${dst_file}

  cp ${src_file} ${dst_file}

  if ${has_wasm_snip}
    echo "Running wasm-snip"
    exec --fail-on-error wasm-snip --snip-rust-panicking-code ${dst_file} -o ${dst_file}
  end

  if ${has_wasm_opt}
    echo "Running wasm-opt"
    exec --fail-on-error wasm-opt -Oz ${dst_file} -o ${dst_file}
  end

end

release ${l}
'''

[tasks.deploy_example]
dependencies = ["deploy", "deploy_wasm"]
script_runner = "@duckscript"
script = '''
out_dir = join_path ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY} out/addons
out_dir = canonicalize ${out_dir}

exp_dir = join_path ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY} ${EXAMPLE_DIR}
exp_dir = canonicalize ${exp_dir}

exp_list = split ${EXAMPLE_PROJECTS} ,

echo Source addon directory: ${out_dir}
out_dir = join_path ${out_dir} **/*

dst_dir = join_path ${exp_dir} addons
echo Destination addon directory: ${dst_dir}
glob_cp ${out_dir} ${dst_dir}

release ${exp_list}
'''
